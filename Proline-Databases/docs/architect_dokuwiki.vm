## Sample Velocity template to generate a HTML report 
## from a Power*Architect project.
## Available variables in the Velocity context (all with $ prefix)
## $tables - a Collection of all tables in the project (instances of SQLTable)
## $projectName - the current name of the project
## $sorter - see: http://velocity.apache.org/tools/releases/1.4/javadoc/org/apache/velocity/tools/generic/SortTool.html
## $dateTool - see: http://velocity.apache.org/tools/releases/1.4/javadoc/org/apache/velocity/tools/generic/DateTool.html
## $numberTool - see: http://velocity.apache.org/tools/releases/1.4/javadoc/org/apache/velocity/tools/generic/NumberTool.html
## $alternator - see: http://velocity.apache.org/tools/releases/1.4/javadoc/org/apache/velocity/tools/generic/AlternatorTool.html

## $sqlTypes - a reference to ca.sqlpower.sqlobject.SQLType to provide the static method
##             String getTypeName(int)

#macro( typeDisplay $column )
#set ($jdbcType = $column.type)
#if ($jdbcType == 2005)CLOB#elseif ($jdbcType == 2011)NCLOB#elseif ($jdbcType == 2004)BLOB#elseif ($jdbcType == -3)VARBINARY#elseif ($jdbcType == -4)LONGVARBINARY#elseif ($jdbcType == -1)LONGVARCHAR#elseif ($jdbcType == 93)TIMESTAMP#elseif ($jdbcType == 92)TIME#elseif ($jdbcType == 91)DATE#elseif ($jdbcType == -15)NCHAR($column.precision)#elseif ($jdbcType == 4)INTEGER#elseif ($jdbcType == -5)BIGINT#elseif ($jdbcType == 5)SMALLINT#elseif ($jdbcType == 8)DOUBLE#elseif ($jdbcType == 7)REAL#elseif ($jdbcType == 16)BOOLEAN#elseif ($jdbcType == -7)BIT#elseif ($jdbcType == 1)CHAR($column.precision)#elseif ($jdbcType == 2)NUMERIC($column.precision, $column.scale)#elseif ($jdbcType == 2)DECIMAL($column.precision, $column.scale)#elseif ($jdbcType == -9)NVARCHAR($column.precision)#elseif ($jdbcType == 12)VARCHAR($column.precision)#elseif ($column.sourceDataType != "")$column.sourceDataTypeName#else $column.typeName #end
#end

 ====== $projectName ======
 ===== List of tables =====

#foreach ($table in $sorter.sort($tables, "name"))
  *[[#$table.name|$table.name]]
#end
  
#foreach ($table in $sorter.sort($tables, "name"))
  
=====$table.name=====
=== (Physical Name: $table.physicalName) ===
#if ($table.remarks)$table.remarks#end

^Logical Column Name ^Physical Column Name  ^Type  ^PK  ^Nullable ^Remarks ^
#foreach ($column in $table.columns)
| $column.name #if ($column.primaryKey)(PK)#end #if ($column.foreignKey) [[#$column.getReferencedTable().getPhysicalName()|(FK)]] #end | $column.physicalName | #typeDisplay($column) | #if ($column.primaryKey)PK#end | #if ($column.primaryKey || !$column.nullable)NOT NULL#end | #if(!$column.remarks.isEmpty())#set($lines = $column.remarks.split("\."))#if(!$lines.isEmpty())$lines.get(0).replaceAll("\n"," ").#end #end|
## foreach column
#end

#foreach ($column in $table.columns)
**$column.name #if ($column.primaryKey)(PK)#end #if ($column.foreignKey) [[#$column.getReferencedTable().getPhysicalName()|(FK)]] #end ($column.physicalName)**
$column.remarks 

## foreach column
#end

#if ($table.importedKeys.size() > 0)
===References===
#foreach ($rel in $table.importedKeys)
  * #set ($pkTable = $rel.getRelationship().getPkTable().getPhysicalName() ) #set ($mappings = $rel.getRelationship().getChildrenWithoutPopulating()) [[#$pkTable|$pkTable]] through (#foreach ($mapping in $mappings)$mapping.pkColumn.physicalName#if( $velocityHasNext ),#end#end)
#end
#end
#if ($table.exportedKeys.size() > 0)
===Referenced By===
#foreach ($rel in $table.exportedKeys)
  * #set ($fkTable = $rel.getFkTable().getPhysicalName()) #set ($mappings = $rel.getChildrenWithoutPopulating()) [[#$fkTable|$fkTable]] referencing (#foreach ($mapping in $mappings)$mapping.fkColumn.physicalName#if( $velocityHasNext ),#end#end)
#end
#end


## end foreach table
#end 
