/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package fr.proline.core.om.model.msi.serializer;  
@SuppressWarnings("all")
public class Protein extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Protein\",\"namespace\":\"fr.proline.core.om.model.msi.serializer\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"sequence\",\"type\":\"string\"},{\"name\":\"mass\",\"type\":\"double\"},{\"name\":\"pi\",\"type\":\"float\"},{\"name\":\"crc64\",\"type\":\"string\"},{\"name\":\"alphabet\",\"type\":\"string\"}]}");
  @Deprecated public int id;
  @Deprecated public java.lang.CharSequence sequence;
  @Deprecated public double mass;
  @Deprecated public float pi;
  @Deprecated public java.lang.CharSequence crc64;
  @Deprecated public java.lang.CharSequence alphabet;
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return sequence;
    case 2: return mass;
    case 3: return pi;
    case 4: return crc64;
    case 5: return alphabet;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: sequence = (java.lang.CharSequence)value$; break;
    case 2: mass = (java.lang.Double)value$; break;
    case 3: pi = (java.lang.Float)value$; break;
    case 4: crc64 = (java.lang.CharSequence)value$; break;
    case 5: alphabet = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'sequence' field.
   */
  public java.lang.CharSequence getSequence() {
    return sequence;
  }

  /**
   * Sets the value of the 'sequence' field.
   * @param value the value to set.
   */
  public void setSequence(java.lang.CharSequence value) {
    this.sequence = value;
  }

  /**
   * Gets the value of the 'mass' field.
   */
  public java.lang.Double getMass() {
    return mass;
  }

  /**
   * Sets the value of the 'mass' field.
   * @param value the value to set.
   */
  public void setMass(java.lang.Double value) {
    this.mass = value;
  }

  /**
   * Gets the value of the 'pi' field.
   */
  public java.lang.Float getPi() {
    return pi;
  }

  /**
   * Sets the value of the 'pi' field.
   * @param value the value to set.
   */
  public void setPi(java.lang.Float value) {
    this.pi = value;
  }

  /**
   * Gets the value of the 'crc64' field.
   */
  public java.lang.CharSequence getCrc64() {
    return crc64;
  }

  /**
   * Sets the value of the 'crc64' field.
   * @param value the value to set.
   */
  public void setCrc64(java.lang.CharSequence value) {
    this.crc64 = value;
  }

  /**
   * Gets the value of the 'alphabet' field.
   */
  public java.lang.CharSequence getAlphabet() {
    return alphabet;
  }

  /**
   * Sets the value of the 'alphabet' field.
   * @param value the value to set.
   */
  public void setAlphabet(java.lang.CharSequence value) {
    this.alphabet = value;
  }

  /** Creates a new Protein RecordBuilder */
  public static fr.proline.core.om.model.msi.serializer.Protein.Builder newBuilder() {
    return new fr.proline.core.om.model.msi.serializer.Protein.Builder();
  }
  
  /** Creates a new Protein RecordBuilder by copying an existing Builder */
  public static fr.proline.core.om.model.msi.serializer.Protein.Builder newBuilder(fr.proline.core.om.model.msi.serializer.Protein.Builder other) {
    return new fr.proline.core.om.model.msi.serializer.Protein.Builder(other);
  }
  
  /** Creates a new Protein RecordBuilder by copying an existing Protein instance */
  public static fr.proline.core.om.model.msi.serializer.Protein.Builder newBuilder(fr.proline.core.om.model.msi.serializer.Protein other) {
    return new fr.proline.core.om.model.msi.serializer.Protein.Builder(other);
  }
  
  /**
   * RecordBuilder for Protein instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Protein>
    implements org.apache.avro.data.RecordBuilder<Protein> {

    private int id;
    private java.lang.CharSequence sequence;
    private double mass;
    private float pi;
    private java.lang.CharSequence crc64;
    private java.lang.CharSequence alphabet;

    /** Creates a new Builder */
    private Builder() {
      super(fr.proline.core.om.model.msi.serializer.Protein.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(fr.proline.core.om.model.msi.serializer.Protein.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Protein instance */
    private Builder(fr.proline.core.om.model.msi.serializer.Protein other) {
            super(fr.proline.core.om.model.msi.serializer.Protein.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = (java.lang.Integer) data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.sequence)) {
        this.sequence = (java.lang.CharSequence) data().deepCopy(fields()[1].schema(), other.sequence);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.mass)) {
        this.mass = (java.lang.Double) data().deepCopy(fields()[2].schema(), other.mass);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pi)) {
        this.pi = (java.lang.Float) data().deepCopy(fields()[3].schema(), other.pi);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.crc64)) {
        this.crc64 = (java.lang.CharSequence) data().deepCopy(fields()[4].schema(), other.crc64);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.alphabet)) {
        this.alphabet = (java.lang.CharSequence) data().deepCopy(fields()[5].schema(), other.alphabet);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setId(int value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'sequence' field */
    public java.lang.CharSequence getSequence() {
      return sequence;
    }
    
    /** Sets the value of the 'sequence' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setSequence(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.sequence = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'sequence' field has been set */
    public boolean hasSequence() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'sequence' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearSequence() {
      sequence = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'mass' field */
    public java.lang.Double getMass() {
      return mass;
    }
    
    /** Sets the value of the 'mass' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setMass(double value) {
      validate(fields()[2], value);
      this.mass = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'mass' field has been set */
    public boolean hasMass() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'mass' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearMass() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'pi' field */
    public java.lang.Float getPi() {
      return pi;
    }
    
    /** Sets the value of the 'pi' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setPi(float value) {
      validate(fields()[3], value);
      this.pi = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'pi' field has been set */
    public boolean hasPi() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'pi' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearPi() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'crc64' field */
    public java.lang.CharSequence getCrc64() {
      return crc64;
    }
    
    /** Sets the value of the 'crc64' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setCrc64(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.crc64 = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'crc64' field has been set */
    public boolean hasCrc64() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'crc64' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearCrc64() {
      crc64 = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'alphabet' field */
    public java.lang.CharSequence getAlphabet() {
      return alphabet;
    }
    
    /** Sets the value of the 'alphabet' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder setAlphabet(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.alphabet = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'alphabet' field has been set */
    public boolean hasAlphabet() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'alphabet' field */
    public fr.proline.core.om.model.msi.serializer.Protein.Builder clearAlphabet() {
      alphabet = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Protein build() {
      try {
        Protein record = new Protein();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.sequence = fieldSetFlags()[1] ? this.sequence : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.mass = fieldSetFlags()[2] ? this.mass : (java.lang.Double) defaultValue(fields()[2]);
        record.pi = fieldSetFlags()[3] ? this.pi : (java.lang.Float) defaultValue(fields()[3]);
        record.crc64 = fieldSetFlags()[4] ? this.crc64 : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.alphabet = fieldSetFlags()[5] ? this.alphabet : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
